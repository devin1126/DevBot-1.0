// Generated by gencpp from file bno055_imu_ros/bno055.msg
// DO NOT EDIT!


#ifndef BNO055_IMU_ROS_MESSAGE_BNO055_H
#define BNO055_IMU_ROS_MESSAGE_BNO055_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace bno055_imu_ros
{
template <class ContainerAllocator>
struct bno055_
{
  typedef bno055_<ContainerAllocator> Type;

  bno055_()
    : orientation()
    , body_rates()
    , linear_acceleration()  {
    }
  bno055_(const ContainerAllocator& _alloc)
    : orientation(_alloc)
    , body_rates(_alloc)
    , linear_acceleration(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _body_rates_type;
  _body_rates_type body_rates;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;





  typedef boost::shared_ptr< ::bno055_imu_ros::bno055_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bno055_imu_ros::bno055_<ContainerAllocator> const> ConstPtr;

}; // struct bno055_

typedef ::bno055_imu_ros::bno055_<std::allocator<void> > bno055;

typedef boost::shared_ptr< ::bno055_imu_ros::bno055 > bno055Ptr;
typedef boost::shared_ptr< ::bno055_imu_ros::bno055 const> bno055ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bno055_imu_ros::bno055_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bno055_imu_ros::bno055_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bno055_imu_ros::bno055_<ContainerAllocator1> & lhs, const ::bno055_imu_ros::bno055_<ContainerAllocator2> & rhs)
{
  return lhs.orientation == rhs.orientation &&
    lhs.body_rates == rhs.body_rates &&
    lhs.linear_acceleration == rhs.linear_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bno055_imu_ros::bno055_<ContainerAllocator1> & lhs, const ::bno055_imu_ros::bno055_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bno055_imu_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bno055_imu_ros::bno055_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bno055_imu_ros::bno055_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bno055_imu_ros::bno055_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bno055_imu_ros::bno055_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bno055_imu_ros::bno055_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bno055_imu_ros::bno055_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bno055_imu_ros::bno055_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a660c7f9d8b57853fe5cf85eb92b12f";
  }

  static const char* value(const ::bno055_imu_ros::bno055_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a660c7f9d8b5785ULL;
  static const uint64_t static_value2 = 0x3fe5cf85eb92b12fULL;
};

template<class ContainerAllocator>
struct DataType< ::bno055_imu_ros::bno055_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bno055_imu_ros/bno055";
  }

  static const char* value(const ::bno055_imu_ros::bno055_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bno055_imu_ros::bno055_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion orientation\n"
"geometry_msgs/Vector3 body_rates\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::bno055_imu_ros::bno055_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bno055_imu_ros::bno055_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
      stream.next(m.body_rates);
      stream.next(m.linear_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bno055_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bno055_imu_ros::bno055_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bno055_imu_ros::bno055_<ContainerAllocator>& v)
  {
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "body_rates: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.body_rates);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BNO055_IMU_ROS_MESSAGE_BNO055_H
