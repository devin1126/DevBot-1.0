// Generated by gencpp from file devbot_navigation/wheel_info.msg
// DO NOT EDIT!


#ifndef DEVBOT_NAVIGATION_MESSAGE_WHEEL_INFO_H
#define DEVBOT_NAVIGATION_MESSAGE_WHEEL_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace devbot_navigation
{
template <class ContainerAllocator>
struct wheel_info_
{
  typedef wheel_info_<ContainerAllocator> Type;

  wheel_info_()
    : wheel_volt_R(0)
    , wheel_volt_L(0)
    , wheel_cmd_R(0.0)
    , wheel_cmd_L(0.0)
    , wheel_vel_R(0.0)
    , wheel_vel_L(0.0)  {
    }
  wheel_info_(const ContainerAllocator& _alloc)
    : wheel_volt_R(0)
    , wheel_volt_L(0)
    , wheel_cmd_R(0.0)
    , wheel_cmd_L(0.0)
    , wheel_vel_R(0.0)
    , wheel_vel_L(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _wheel_volt_R_type;
  _wheel_volt_R_type wheel_volt_R;

   typedef int64_t _wheel_volt_L_type;
  _wheel_volt_L_type wheel_volt_L;

   typedef double _wheel_cmd_R_type;
  _wheel_cmd_R_type wheel_cmd_R;

   typedef double _wheel_cmd_L_type;
  _wheel_cmd_L_type wheel_cmd_L;

   typedef double _wheel_vel_R_type;
  _wheel_vel_R_type wheel_vel_R;

   typedef double _wheel_vel_L_type;
  _wheel_vel_L_type wheel_vel_L;





  typedef boost::shared_ptr< ::devbot_navigation::wheel_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::devbot_navigation::wheel_info_<ContainerAllocator> const> ConstPtr;

}; // struct wheel_info_

typedef ::devbot_navigation::wheel_info_<std::allocator<void> > wheel_info;

typedef boost::shared_ptr< ::devbot_navigation::wheel_info > wheel_infoPtr;
typedef boost::shared_ptr< ::devbot_navigation::wheel_info const> wheel_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::devbot_navigation::wheel_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::devbot_navigation::wheel_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::devbot_navigation::wheel_info_<ContainerAllocator1> & lhs, const ::devbot_navigation::wheel_info_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_volt_R == rhs.wheel_volt_R &&
    lhs.wheel_volt_L == rhs.wheel_volt_L &&
    lhs.wheel_cmd_R == rhs.wheel_cmd_R &&
    lhs.wheel_cmd_L == rhs.wheel_cmd_L &&
    lhs.wheel_vel_R == rhs.wheel_vel_R &&
    lhs.wheel_vel_L == rhs.wheel_vel_L;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::devbot_navigation::wheel_info_<ContainerAllocator1> & lhs, const ::devbot_navigation::wheel_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace devbot_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::devbot_navigation::wheel_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::devbot_navigation::wheel_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devbot_navigation::wheel_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::devbot_navigation::wheel_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devbot_navigation::wheel_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::devbot_navigation::wheel_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::devbot_navigation::wheel_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da1f1150c07550c7f87dd0a67c7a0fac";
  }

  static const char* value(const ::devbot_navigation::wheel_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda1f1150c07550c7ULL;
  static const uint64_t static_value2 = 0xf87dd0a67c7a0facULL;
};

template<class ContainerAllocator>
struct DataType< ::devbot_navigation::wheel_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "devbot_navigation/wheel_info";
  }

  static const char* value(const ::devbot_navigation::wheel_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::devbot_navigation::wheel_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 wheel_volt_R\n"
"int64 wheel_volt_L\n"
"float64 wheel_cmd_R\n"
"float64 wheel_cmd_L\n"
"float64 wheel_vel_R\n"
"float64 wheel_vel_L\n"
;
  }

  static const char* value(const ::devbot_navigation::wheel_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::devbot_navigation::wheel_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_volt_R);
      stream.next(m.wheel_volt_L);
      stream.next(m.wheel_cmd_R);
      stream.next(m.wheel_cmd_L);
      stream.next(m.wheel_vel_R);
      stream.next(m.wheel_vel_L);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheel_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::devbot_navigation::wheel_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::devbot_navigation::wheel_info_<ContainerAllocator>& v)
  {
    s << indent << "wheel_volt_R: ";
    Printer<int64_t>::stream(s, indent + "  ", v.wheel_volt_R);
    s << indent << "wheel_volt_L: ";
    Printer<int64_t>::stream(s, indent + "  ", v.wheel_volt_L);
    s << indent << "wheel_cmd_R: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_cmd_R);
    s << indent << "wheel_cmd_L: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_cmd_L);
    s << indent << "wheel_vel_R: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_vel_R);
    s << indent << "wheel_vel_L: ";
    Printer<double>::stream(s, indent + "  ", v.wheel_vel_L);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEVBOT_NAVIGATION_MESSAGE_WHEEL_INFO_H
